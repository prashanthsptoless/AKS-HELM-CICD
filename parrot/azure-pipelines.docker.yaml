name: 0.2.$(Rev:r)

trigger:
  batch: true
  paths:
    include:
      - parrot
    exclude:
      - 'parrot/src/parrot/charts'
      - 'parrot/azure-pipelines.deploy.yaml'
      - 'parrot/azure-pipelines.helm.yaml'
  branches:
    include:
      - main

variables:
  - group: acr
  - name: helmVersion
    value: 3.5.4
  - name: buildConfiguration
    value: 'Release'
  - name: containerRepository
    value: parrot
  - name: nuget_packages
    value: $(Pipeline.Workspace)/.nuget/packages
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm

stages:
  - stage: Build
    displayName: 'Build Docker Image'
    jobs:
      - job: Docker
        displayName: 'Build and Push Docker Image'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - checkout: self
            fetchDepth: 1

          - task: Cache@2
            displayName: Cache NuGet packages
            inputs:
              key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/parrot/src/parrot/packages.lock.json'
              restoreKeys: |
                nuget | "$(Agent.OS)"
              path: $(nuget_packages)

          - task: Cache@2
            displayName: Cache npm
            inputs:
              key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/parrot/src/parrot/package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)

          - task: UseDotNet@2
            displayName: 'Use .NET Core SDK version 3.1.408'
            inputs:
              packageType: 'sdk'
              version: '3.1.408'

          - task: NodeTool@0
            displayName: 'Use Node version 11.x'
            inputs:
              versionSpec: '11.x'

          - task: Bash@3
            displayName: 'Restore NPM packages'
            inputs:
              targetType: 'inline'
              script: 'npm ci'
              workingDirectory: 'parrot/src/parrot'

          - task: DotNetCoreCLI@2
            displayName: 'Run Unit Tests'
            inputs:
              command: 'test'
              projects: 'parrot/tests/parrot.UnitTests/parrot.UnitTests.csproj'
              arguments: '--configuration $(BuildConfiguration) --logger:trx'
              testRunTitle: 'Unit Tests'

          - task: DotNetCoreCLI@2
            displayName: 'Publish Application'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: 'parrot/src/parrot/parrot.csproj'
              arguments: '--configuration $(BuildConfiguration) --output parrot/src/parrot/out'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: Docker@2
            displayName: 'Build Docker Image'
            inputs:
              # containerRegistry: 'ACR'
              repository: '$(containerRepository)'
              command: 'build'
              Dockerfile: 'parrot/src/parrot/Dockerfile'
              buildContext: 'parrot/src/parrot'
              # tags: '$(Build.BuildNumber)'

          - template: ../pipeline-templates/trivy-scan.yml
            parameters:
              imageName: $(containerRepository):$(Build.BuildId)
              failTaskOnFailedScan: true

          - task: Docker@2
            displayName: 'Push Docker Image'
            inputs:
              containerRegistry: 'ACR'
              repository: '$(containerRepository)'
              command: 'push'
              tags: '$(Build.BuildNumber)'
